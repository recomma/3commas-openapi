openapi: 3.0.3
info:
  title: 3Commas API (DCA Bot)
  version: '1.0.0'
  description: |
    Endpoints to create and manage DCA Bots on 3Commas.
servers:
  - url: https://api.3commas.io/public/api
tags:
  - name: Market Data
    description: |
      The Market data section provides access to various endpoints that deliver essential information about cryptocurrency exchanges, trading pairs, and market rules. This data is crucial for understanding the available markets and their specific conditions.

      Market data endpoints show:
      
      - Exchange details: Including supported trading pairs and available assets
      - Trading rules: Such as minimum and maximum order sizes, and other market restrictions
      - Current market conditions: Including current Bid, Ask and Last price
      
      3Commas allows users to retrieve comprehensive market data through these endpoints, ensuring up-to-date and accurate information for effective trading strategies.
  - name: DCA Bot
    description: |
      The DCA Bot allows users to automate trading on the exchange by following a Dollar Cost Averaging strategy.

      DCA Bot entity contains a set of parameters and conditions that manage deals. 3Commas provides methods to create and manage DCA Bot entities and their associated deals.

      Each DCA Bot entity holds information, including:

      - Exchange account and trading pairs
      - Strategy configuration and active deals
      - Take Profit and Stop Loss settings
      - Safety Orders configuration for risk management
      - Trading cooldowns and limits

      The process starts with configuring a DCA Bot, where all trading conditions, such as base and safety orders, take profit, and stop loss, are set. The bot automatically creates and manages deals based on the configured strategy.
  - name: DCA Bot Deals
    description: |
      The Deal is a sub-entity of the DCA Bot. It represents a single automated transaction executed based on the bot's configured strategy.

      The Deal entity holds the following information about:

      - Order type
      - Trading pair(s)
      - Status of the deal
      - Initial and realized trade amounts
      - Initial and realized total values of the trade
      - Price details, including entry, average, and final prices
      - Position percentage reached during the trade
      - Conditions related to trailing mechanisms and triggers (e.g., trailing stop enabled, trigger price)
      
      Deals are created automatically by the DCA Bot based on predefined conditions and the selected trading strategy.

      A Deal can include various trading stages or types, depending on the configuration, such as:

      - Initial trade opening
      - Trailing Take Profit execution
      - Stop Loss activation
      - Safety orders placement
      - Final trade closure
      Here, you can find methods and attributes to monitor, update, or analyze the details of deal.
security:
  - APIKEY: []

paths:
  /ver1/validate:
    get:
      summary: Test authentication
      description: |
        The quickest way to test your authentication setup is by sending a request to the `/ver1/validate` endpoint.  
        This endpoint verifies the validity of your API credentials and returns the status of your authentication.
      operationId: validateAuthentication
      security:
        - SIGNED: []
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/strategy_list:
    get:
      summary: Available strategy list
      description: Returns available strategy list for DCA Bot. Use the query parameters to page through results.
      operationId: listStrategies
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      tags:
        - DCA Bot
      parameters:
        - $ref: '#/components/parameters/AccountQueryId'
        - name: type
          in: query
          description: Specifies the strategy direction for the bot.
          schema:
            type: string
            enum:
              - long
              - short
        - name: strategy
          in: query
          description: Specifies the type of strategy list.
          schema:
            type: string
            enum:
              - simple
              - composite
      responses:
        '200':
          description: Available strategy list for DCA Bot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyList'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/create_bot:
    post:
      tags:
        - DCA Bot
      summary: Create DCA Bot
      description: Creates a new DCA Bot
      operationId: createDcaBot
      requestBody:
        description: Bot configuration payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotRequest'
            example:
              account_id: 32833909
              name: "name DCA Bot"
              pairs:
                - "BNFCR_1INCHUSDT"
              strategy_list:
                - strategy: "nonstop"
                  options: {}
              base_order_volume: "100.0"
              base_order_volume_type: "base_currency"
              max_safety_orders: 4
              take_profit: "0.0"
              take_profit_steps:
                - amount_percentage: 50
                  profit_percentage: 10
                - amount_percentage: 50
                  profit_percentage: 20
              close_deals_timeout: "60"
              active_safety_orders_count: 1
              risk_reduction_percentage: "1"
              safety_order_volume: "30.0"
              safety_order_step_percentage: "1.0"
              take_profit_type: "total"
              martingale_volume_coefficient: "2"
              martingale_step_coefficient: "4.0"
      responses:
        '200':
          $ref: '#/components/responses/BotOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/update:
    patch:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Edit DCA Bot
      description: Edits an existing DCA Bot by its ID.
      operationId: updateBot
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotRequest'
            example:
              account_id: 32199203
              name: "name DCA Bot"
              pairs:
                - "USDT_ETH"
              strategy_list:
                - options: {}
                  strategy: "nonstop"
              base_order_volume: "100.0"
              take_profit_type: "total"
              take_profit: "0.0"
              take_profit_steps:
                - amount_percentage: 50
                  profit_percentage: 10
                - amount_percentage: 50
                  profit_percentage: 20
              stop_loss_percentage: "8.0"
              close_deals_timeout: "100"
              max_safety_orders: 3
              active_safety_orders_count: 3
              safety_order_volume: "20.0"
              safety_order_step_percentage: "1.0"
              min_profit_type: "base_order_volume"
              martingale_volume_coefficient: "2.0"
              martingale_step_coefficient: "2.0"
      responses:
        '200':
          $ref: '#/components/responses/BotUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/show:
    get:
      tags:
        - DCA Bot
      summary: Get DCA Bot
      description: Shows information about a specific DCA Bot using its ID.
      operationId: getBot
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/BotPathId'
        - name: include_events
          in: query
          required: true
          description: Indicates whether to include information about events related to the entity.
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/BotOK'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots:
    get:
      tags:
        - DCA Bot
      summary: Get the list of DCA Bots
      description: |
        Returns a list of DCA Bots by user. Use the query parameters to filter the results.
      operationId: listBots
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/AccountQueryId'
        - name: strategy
          in: query
          description: Filters bots by trading strategy type.
          schema:
            type: string
            enum: [long, short]
        - name: order_direction
          in: query
          description: Sets the direction of ordering.
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
        - name: limit
          in: query
          description: Limits the number of records returned (max 100).
          schema:
            type: integer
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Skips the first N records in the results.
          schema:
            type: integer
            minimum: 0
        - name: from
          in: query
          description: Returns entities created after a specific timestamp (ms since epoch).
          schema:
            type: integer
        - name: scope
          in: query
          description: Filters bots by their status.
          schema:
            type: string
        - name: sort_by
          in: query
          description: Specifies the field used to order the results.
          schema:
            type: string
            enum: [created_at, updated_at, profit]
            default: created_at
        - name: quote
          in: query
          description: Filters by quote currency.
          schema:
            type: string
      responses:
        '200':
          description: Array of DCA Bot entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/disable:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Disable DCA Bot
      description: Disables an existing DCA Bot using its ID.
      operationId: disableBot
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '201':
          description: Bot disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          $ref: '#/components/responses/Forbidden'
        
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/enable:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Enable DCA Bot
      description: Enables an existing DCA Bot using its ID.
      operationId: enableBot
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '200':
          description: Bot enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/copy_and_create:
    post:
      tags:
        - DCA Bot
      summary: Copy DCA Bot
      description: Copies the bot from or to another linked exchange account connected to 3Commas.
      operationId: copyAndCreateBot
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      requestBody:
        description: Payload for copying an existing DCA Bot
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyBotRequest'
      responses:
        '201':
          description: Created Bot copy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyBotResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/panic_sell_all_deals:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Close DCA Bot at market price
      description: Closes all deals of the bot at market price and disables the DCA Bot.
      operationId: panicSellAllDeals
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '201':
          $ref: '#/components/responses/BotCreated'
        '404':
          $ref: '#/components/responses/NotFound'

        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/cancel_all_deals:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Cancel DCA Bot
      description: Cancels an existing DCA Bot and all active deals using the bot's ID.
      operationId: cancelAllDeals
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '200':
          $ref: '#/components/responses/BotOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/update_pairs_black_list:
    post:
      tags:
        - DCA Bot
      summary: Add pairs to blacklist
      description: Adds specified pair(s) to the blacklist, preventing all DCA bots from opening deals with these pairs.
      operationId: updatePairsBlacklist
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      parameters:
        - name: pairs
          in: query
          description: Trading pair(s) in 3Commas format. Use the endpoint All Market Pairs to get valid values.
          required: true
          schema:
            type: string
          example: "1INCH_1INCH-USD-SWAP"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairsResponse'
              example:
                pairs:
                  - "1INCH_1INCH-USD-SWAP"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/pairs_black_list:
    get:
      tags:
        - DCA Bot
      summary: Get blacklist of pairs
      description: Returns the list of blacklist pair(s) that restricts all DCA bots from opening deals with these pairs.
      operationId: getPairsBlacklist
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairsResponse'
              example:
                pairs:
                  - "BTC_SUI"
                  - "BTC_RONIN"
                  - "1INCH_1INCH-USD-SWAP"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/profit_by_day:
    get:
      summary: Get DCA Bot profit data
      description: Returns daily profit data for a specified DCA Bot, grouped by date and identified by its unique ID.
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      tags:
        - DCA Bot
      operationId: getProfitByDay
      parameters:
        - $ref: '#/components/parameters/BotPathId'
        - name: days
          in: query
          description: Specifies the number of days for which profit data is requested for this bot.
          schema:
            type: integer
            default: 30
      responses:
        '201':
          description: Profit time series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfitByDay'
              example:
                - s_date: "2024-10-28"
                  unix_timestamp: 1730073600
                  profit:
                    btc: "0.00002960"
                    usd: "2.05"
                - s_date: "2024-10-29"
                  unix_timestamp: 1730160000
                  profit:
                    btc: "0.00001436"
                    usd: "1.02"
                - s_date: "2024-10-30"
                  unix_timestamp: 1730246400
                  profit:
                    btc: "0.00001456"
                    usd: "1.06"
                - s_date: "2024-11-06"
                  unix_timestamp: 1730851200
                  profit:
                    btc: "0.00002720"
                    usd: "2.05"
                - s_date: "2024-11-07"
                  unix_timestamp: 1730937600
                  profit:
                    btc: "0.00002823"
                    usd: "2.13"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/stats:
    get:
      tags:
        - DCA Bot
      summary: Get DCA Bot stats
      description: Returns profit and locked amount data on deals for all DCA Bots or an existing bot or an existing exchange account using their ID.
      operationId: getBotsStats
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/AccountQueryId'
        - name: bot_id
          in: query
          description: Filters entities linked to the specified DCA Bot.
          schema:
            type: integer
      responses:
        '200':
          description: Stats object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotsStats'
              example:
                overall_stats:
                  USDT: "-47.47740906"
                today_stats:
                  USDT: "10.98885705"
                profits_in_usd:
                  overall_usd_profit: -47.48
                  today_usd_profit: 10.99
                  active_deals_usd_profit: 1.366505088
                  funds_locked_in_active_deals: 300.843218676
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/stats_by_date:
    get:
      tags:
        - DCA Bot
      summary: Get DCA Bot stats by date
      description: Returns profit data for the specified DCA Bot(s) over a defined number of days.
      operationId: getBotsStatsByDate
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/AccountQueryId'
        - name: bot_id
          in: query
          description: Filters entities linked to the specified DCA Bot.
          schema:
            type: integer
        - name: date
          in: query
          description: Specific day for which profit data is requested for this bot or account.
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Stats by date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotsStatsByDate'
              example:
                stats:
                  USDT: "7.92064973"
                usd_profit: "7.92064973"
                btc_profit: "0.000103814744285414700639614134423823"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/delete:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot
      summary: Delete DCA Bot
      description: Deletes an existing DCA Bot using its ID.
      operationId: deleteBot
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '201':
          description: Created
          content:
            text:
              example: "true"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/bots/{bot_id}/deals_stats:
    get:
      summary: DCA Bot deals stats
      description: Returns data on active and created deals, as well as profit data for the entire period for the DCA Bot.
      operationId: getDealsStats
      tags:
        - DCA Bot
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/BotPathId'
      responses:
        '200':
          description: Deals stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealsStats'
              example:
                active: 1
                completed: 83
                panic_sold: 0
                from_currency_is_dollars: true
                completed_deals_usd_profit: "10.75875754"
                completed_deals_btc_profit: "0.00014222663277458617764387880566349063980977"
                funds_locked_in_active_deals: "169.701896364"
                btc_funds_locked_in_active_deals: "0.001762864967028976210730336302468929"
                active_deals_usd_profit: "-11.150934036"
                active_deals_btc_profit: "-0.000115836012342202235229626437817425"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/accounts/market_list:
    get:
      tags:
        - Market Data
      summary: Supported markets list
      description: Returns the list of markets supported by 3Commas.
      operationId: getMarketList
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketListItem'
              example:
                - market_name: "Binance Futures USDT-M (EEA)"
                  market_url: "https://www.binance.com/en/futures/ref/108190303"
                  market_icon: "https://3commas.io/img/exchanges/binance.png"
                  help_link: "https://help.3commas.io/en/articles/3568667"
                  market_code: "binance_futures_eea"
                  form_fields:
                    required:
                      - field: "secret"
                        localized_name: "API Secret:"
                      - field: "api_key"
                        localized_name: "API Key:"
                    optional: []
                  available_connection_flows:
                    - "form"
                  third_party_allowed: false
                  trusted_ips:
                    - "103.26.9.7"
                    - "103.26.9.15"
                    - "103.26.9.23"
                    - "103.26.9.31"
                    - "103.26.9.39"
                    - "103.26.9.47"
                    - "103.26.9.55"
                    - "103.26.9.63"
                    - "103.26.9.71"
                    - "103.26.9.79"
                    - "103.26.9.87"
                    - "103.26.9.95"
                    - "103.26.9.103"
                    - "103.26.9.111"
                    - "103.26.9.119"
                    - "103.26.9.127"
                    - "103.26.9.135"
                    - "103.26.9.143"
                    - "103.26.9.151"
                    - "103.26.9.159"
                    - "103.26.9.167"
                    - "103.26.9.175"
                    - "103.26.9.183"
                    - "103.26.9.191"
                    - "103.26.9.199"
                    - "103.26.9.207"
                    - "103.26.9.215"
                    - "103.26.9.223"
                    - "103.26.9.231"
                    - "103.26.9.239"
                    - "103.26.9.247"
                    - "103.26.9.255"
                  trusted_ips_input_type: "inline"
                  fast_connect_action_name: "binance"
                - market_name: "OKX"
                  market_url: "https://www.okx.com/join/60047333"
                  market_icon: "https://3commas.io/img/exchanges/okex.png"
                  help_link: "https://help.3commas.io/en/articles/3109057"
                  market_code: "okex"
                  form_fields:
                    required:
                      - field: "secret"
                        localized_name: "API Secret:"
                      - field: "api_key"
                        localized_name: "API Key:"
                      - field: "passphrase"
                        localized_name: "Passphrase:"
                    optional: []
                  available_connection_flows:
                    - "fast_connect"
                    - "form"
                  third_party_allowed: false
                  trusted_ips:
                    - "103.26.9.0/24"
                  trusted_ips_input_type: "inline"
                  fast_connect_action_name: "okex"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/accounts/market_pairs:
    get:
      tags:
        - Market Data
      summary: All market pairs
      description: The method allows getting the list of pairs supported by the exchange in 3Commas format.
      operationId: getMarketPairs
      security: []
      parameters:
        - name: market_code
          in: query
          description: Unique exchange code in the 3Commas system. Use the “Supported markets list” endpoint to get valid values.
          required: true
          schema:
            type: string
          example: "binance_us"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "BTC_ETH"
                - "BTC_LTC"
                - "BTC_BNB"
                - "BTC_NEO"
                - "ETH_QTUM"
                - "ETH_EOS"
                - "ETH_SNT"
                - "ETH_BNT"
                - "BTC_GAS"
                - "ETH_BNB"
                - "USDT_BTC"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/accounts/currency_rates:
    get:
      tags:
        - Market Data
      summary: Currency rates and limits
      description: The method returns the current trading rules and ticker information on exchange.
      operationId: getCurrencyRates
      security: []
      parameters:
        - name: market_code
          in: query
          description: Unique exchange code in the 3Commas system. Use endpoint Supported markets list to get value for parameter market_code.
          required: true
          schema:
            type: integer
        - name: pair
          in: query
          description: Trading pair in 3Commas format. Use endpoints All Market Pairs to get value for parameter pair in 3Commas format.
          required: true
          schema:
            type: string
        - name: limit_type
          in: query
          description: Defines the type of trading limits returned based on the selected trading tool bot or smart_trade. If set to bot, the response includes trading limits specific to DCA, Signal and Grid Bots. If set to smart_trade, the response includes trading limits for SmartTrade.
          schema:
            type: string
            enum:
              - bot
              - smart_trade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRates'
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/accounts/currency_rates_with_leverage_data:
    get:
      tags:
        - Market Data
      summary: Currency rates and limits with leverage data
      description: The method returns the current trading rules and ticket information with data about leverages on the futures exchange.
      operationId: getCurrencyRatesWithLeverageData
      security: []
      parameters:
        - name: market_code
          in: query
          description: Unique exchange code in the 3Commas system. Use endpoint Supported markets list to get value for parameter market_code.
          required: true
          schema:
            type: integer
        - name: pair
          in: query
          description: Trading pair in 3Commas format. Use endpoints All Market Pairs to get value for parameter pair in 3Commas format.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRatesWithLeverageData'
              example:
                last: "0.3039"
                bid: "0.3039"
                ask: "0.304"
                orderbook_ask: "0.304"
                orderbook_bid: "0.3039"
                orderbook_last: "0.3039"
                orderbook_price_currency: "BNFCR"
                strategy_name: "orderbook_price"
                contract_strategy_name: "orderbook_price"
                leverage_data:
                  - code: "cross"
                    name: "Cross"
                    can_set_leverage_value: true
                    available_leverage_values: []
                    max_leverage: "25.0"
                    valid:
                      min: 1
                      max: "25.0"
                instrumentKind: "linear_futures"
                priceStep: "0.0001"
                minLotSize: "1.0"
                maxLotSize: "5000000.0"
                lotStep: "1.0"
                maxMarketBuyAmount: "500000.0"
                maxMarketSellAmount: "500000.0"
                minMarketBuyAmount: "1.0"
                minMarketSellAmount: "1.0"
                minTotal: "5.0"
                minMarketTotal: "5.0"
                maxTotal: "500000.0"
                bidMultiplierDown: "0.9"
                bidMultiplierUp: "1.1"
                askMultiplierUp: "1.1"
                askMultiplierDown: "0.9"
                minPrice: "0.0613"
                maxPrice: "100000.0"
        '400':
          $ref: '#/components/responses/BadRequest'
        
        '401':
          $ref: '#/components/responses/Unauthorized'

        '429':
          $ref: '#/components/responses/RateLimitExceeded'

        '418':
          $ref: '#/components/responses/IPAutoBanned'

        '500':
          $ref: '#/components/responses/InternalServerError'

        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/deals/{deal_id}/show:
    get:
      tags:
        - DCA Bot Deals
      summary: Get deal
      description: Shows information about a specific deal of DCA Bot using its ID.
      operationId: getDeal
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - $ref: '#/components/parameters/DealPathId'
      responses:
        '200':
          $ref: '#/components/responses/DealResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/deals:
    get:
      tags:
        - DCA Bot Deals
      summary: Get list of deals
      description: Returns the list of deals. Use the query parameters to page through results.
      operationId: listDeals
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      parameters:
        - name: bot_id
          in: query
          description: Filters by the unique ID of the 3Commas DCA Bot.
          schema:
            type: integer
        - $ref: '#/components/parameters/AccountQueryId'
        - name: limit
          in: query
          description: Limits the number of records returned.
          schema:
            type: integer
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Skips the first N records in the results.
          schema:
            type: integer
            minimum: 0
        - name: from
          in: query
          description: Returns entities created after a specific time.
          schema:
            type: string
        - name: to
          in: query
          description: Returns entities created before a specific time.
          schema:
            type: string
        - name: scope
          in: query
          description: Filters deals by their status.
          schema:
            type: string
            enum:
              - active
              - finished
              - completed
              - cancelled
              - failed
            nullable: true
            default: null
        - name: order
          in: query
          description: Specifies the field used to order the results.
          schema:
            type: string
            enum:
              - created_at
              - updated_at
              - closed_at
              - profit
              - profit_percentage
            default: created_at
        - name: order_direction
          in: query
          description: 'Sets the direction of order: ASC or DESC.'
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - name: base
          in: query
          description: Filters by base currency.
          schema:
            type: string
        - name: quote
          in: query
          description: Filters by quote currency.
          schema:
            type: string
        - name: note
          in: query
          description: Filters deals by note.
          schema:
            type: string
      responses:
        '200':
          description: Array of Deals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/deals/{deal_id}/update_deal:
    patch:
      tags:
        - DCA Bot Deals
      summary: Update deal
      description: Edits an existing deal of DCA Bot using its ID. Endpoint available for deals in statuses `bought` and `close_strategy_activated`.
      operationId: updateDeal
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      parameters:
        - name: deal_id
          in: path
          description: Unique 3Commas deal ID.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DealUpdateRequest'
            example:
              stop_loss_type: stop_loss
              stop_loss_percentage: 4
              stop_loss_timeout_in_seconds: 100
              max_safety_orders: 6
              take_profit_type: "base" # missing in original API docs
      responses:
        '200':
          description: Updated Deal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '418':
          $ref: '#/components/responses/IPAutoBanned'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /ver1/deals/{deal_id}/panic_sell:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot Deals
      summary: Close deal at market price
      description: |
        Closes a specific deal within a DCA Bot by market using its ID.
        After this action, the final status Panic_sold will be automatically set by 3Commas.
      operationId: panicSellDeal
      parameters:
        - $ref: '#/components/parameters/DealPathId'
      responses:
        '201':
          $ref: '#/components/responses/DealResponse'

  /ver1/deals/{deal_id}/panic_sell_step:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot Deals
      summary: Close one step in deal at market price
      description: |
        Closes a specific Trade within the Deal by market using its ID.
        After this action, the final status Panic_sold will be automatically set by 3Commas.
      operationId: panicSellDealStep
      parameters:
        - $ref: '#/components/parameters/DealPathId'
        - $ref: '#/components/parameters/TradeQueryId'
      responses:
        '201':
          $ref: '#/components/responses/DealResponse'

  /ver1/deals/{deal_id}/cancel:
    post:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_WRITE
      tags:
        - DCA Bot Deals
      summary: Cancel deal
      description: |
        Cancels a specific deal within the DCA Bot using its ID.
        After this action, 3Commas will automatically set the final status to Cancelled for this deal.
      operationId: cancelDeal
      parameters:
        - $ref: '#/components/parameters/DealPathId'
      responses:
        '201':
          $ref: '#/components/responses/DealResponse'

  /ver1/deals/{deal_id}/market_orders:
    get:
      security:
        - SIGNED: []
      x-permissions:
        - BOTS_READ
      tags:
        - DCA Bot Deals
      summary: Get trades of deal
      description: Returns all type of trades for a specific deal.
      operationId: getDealMarketOrders
      parameters:
        - $ref: '#/components/parameters/DealPathId'
      responses:
        '200':
          description: Successful response with list of trade orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketOrder'
              example:
                - order_id: "1110863869"
                  order_type: "SELL"
                  deal_order_type: "Manual Safety"
                  cancellable: false
                  status_string: "Inactive"
                  created_at: "2024-11-11T17:02:50.001Z"
                  updated_at: "2024-11-11T17:02:50.166Z"
                  quantity: "0.0"
                  quantity_remaining: "0.0"
                  total: "0.0"
                  rate: "0.297"
                  average_price: "0.0"
                - order_id: "1110817001"
                  order_type: "SELL"
                  deal_order_type: "Manual Safety"
                  cancellable: false
                  status_string: "Inactive"
                  created_at: "2024-11-11T16:46:59.479Z"
                  updated_at: "2024-11-11T16:46:59.643Z"
                  quantity: "0.0"
                  quantity_remaining: "0.0"
                  total: "0.0"
                  rate: "0.297"
                  average_price: "0.0"

components:
  parameters:
    BotPathId:
      name: bot_id
      description: Unique 3Commas ID for this DCA Bot entity.
      in: path
      required: true
      schema: {type: integer}

    AccountQueryId:
      name: account_id
      in: query
      schema: {type: integer}
      description: Unique 3Commas ID of the exchange account entity. Use the List of connected exchanges and wallets endpoint to retrieve the value for the account_id parameter.

    DealPathId:
      name: deal_id
      in: path
      description: Unique 3Commas ID for this Deal entity.
      required: true
      schema:
        type: integer

    TradeQueryId:
      name: trade_id
      in: query
      description: Unique 3Commas ID for the Trade entity within the deal that should be sold. Use the Get Deal endpoint to retrieve trade_id values.
      required: true
      schema:
        type: integer

  responses:
    BotOK:
      description: Bot details (success)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bot'
    BotCreated:
      description: Bot created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bot'
    BotUpdated:
      description: Bot updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bot'

    Unauthorized:
      x-summary: Unauthorized
      description: Request is not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            apiKeyInvalid:
              summary: API key invalid, expired or not set
              value:
                error: api_key_invalid_or_expired
                error_description: Unauthorized. Invalid or expired api key.
            signatureInvalid:
              summary: Signature invalid or not set
              value:
                error: signature_invalid

    NotFound:
      x-summary: Not Found
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            resourceNotFound:
              summary: Entity not found
              value:
                error: Not found

    Forbidden:
      x-summary: Forbidden
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: Access forbidden
              value:
                error: Forbidden

    BadRequest:
      x-summary: Bad Request
      description: Malformed request (issue is on the sender’s side).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    RateLimitExceeded:
      x-summary: Too Many Requests
      description: Request rate limit exceeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    IPAutoBanned:
      x-summary: IP Auto-Banned
      description: IP auto-banned for continuing to send requests after receiving 429 codes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      x-summary: Internal Server Error
      description: Internal errors (issue is on 3Commas’s side).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    GatewayTimeout:
      x-summary: Gateway Timeout
      description: Gateway timeout, indicating the API couldn’t get a timely response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    DealResponse:
      description: Deal details (success)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deal'
          example:
            from_currency_id: 0
            to_currency_id: 0
            id: 1234567890
            type: Deal
            bot_id: 34567890
            bot_name: ETH/USDT Classic trading
            deal_has_error: false
            account_id: 12345678
            account_name: Paper Account 1251857
            created_at: "2024-11-14T15:29:42.248Z"
            updated_at: "2024-11-14T15:47:47.467Z"
            closed_at: null
            "finished?": false
            max_safety_orders: 6
            active_safety_orders_count: 3
            current_active_safety_orders_count: 3
            current_active_safety_orders: 3
            completed_safety_orders_count: 0
            active_manual_safety_orders: 0
            completed_manual_safety_orders_count: 0
            safety_order_volume: "15.0"
            safety_order_step_percentage: "1.0"
            safety_order_volume_type: quote_currency
            safety_strategy_list: []
            "cancellable?": true
            "panic_sellable?": true
            trailing_enabled: false
            tsl_enabled: false
            stop_loss_timeout_enabled: false
            stop_loss_timeout_in_seconds: 100
            pair: USDT_ETH
            status: bought
            localized_status: Active
            take_profit: null
            take_profit_type: total
            take_profit_steps:
              - id: 0
                amount_percentage: 40.0
                profit_percentage: 2.0
                editable: true
                panic_sellable: true
                trade_id: 1123324654
                execution_timestamp: null
                initial_amount: "0.0129"
                price: "3163.63"
                status: Placed
              - id: 1
                amount_percentage: 50.0
                profit_percentage: 3.0
                editable: true
                panic_sellable: true
                trade_id: 1123324657
                execution_timestamp: null
                initial_amount: "0.0162"
                price: "3194.65"
                status: Placed
              - id: 2
                amount_percentage: 10.0
                profit_percentage: 4.0
                editable: true
                panic_sellable: true
                trade_id: 1123324660
                execution_timestamp: null
                initial_amount: "0.0033"
                price: "3225.67"
                status: Placed
            base_order_volume: "100.0"
            base_order_volume_type: quote_currency
            leverage_type: not_specified
            leverage_custom_value: null
            bought_amount: "0.0324"
            bought_volume: "100.39125096"
            bought_average_price: "3098.4954"
            base_order_average_price: "3098.4954"
            sold_amount: "0.0"
            sold_volume: "0.0"
            sold_average_price: "0"
            final_profit: "-0.26434609"
            final_profit_percentage: "0"
            usd_final_profit: "-0.26"
            actual_profit: "-0.71037162"
            actual_usd_profit: "-0.71037162"
            martingale_volume_coefficient: "1.7"
            martingale_step_coefficient: "4.0"
            stop_loss_percentage: "4.0"
            sl_to_breakeven_enabled: false
            sl_to_breakeven_data: null
            error_message: null
            profit_currency: quote_currency
            stop_loss_type: stop_loss
            from_currency: USDT
            to_currency: ETH
            min_profit_percentage: "0.0"
            min_profit_type: null
            close_strategy_list: []
            note: null
            add_fundable: true
            smart_trade_convertable: true
            market_type: spot
            current_price: "3079.65"
            take_profit_price: "3079.65"
            stop_loss_price: "2974.555584"
            actual_profit_percentage: "-0.61"
            orderbook_price_currency: USDT
            bot_events:
              - message: "Placing base order. Price: 3095.4 USDT Size: 100.29096 USDT (0.0324 ETH)"
                created_at: "2024-11-14T15:29:42.359Z"
              - message: "Base order executed.  Price: 3098.4954 USDT.  Size: 100.39125096 USDT (0.0324 ETH)"
                created_at: "2024-11-14T15:30:15.478Z"

  securitySchemes:
    APIKEY:
      type: apiKey
      in: header
      name: Apikey
      description: |
        Your 3Commas API key. This must be included in all requests that require authentication.
    SIGNED:
      type: apiKey
      in: header
      name: Signature
      description: |
        Use the `Signature` header to verify the authenticity of SIGNED endpoints. Two signing methods are supported—pick the one corresponding to your key type:

        **1) RSA (RSASSA-PKCS1-v1_5 with SHA-256)**  
        - **Payload**: `<path>?<sorted_query_params>`  
        - **Steps**:  
          1. Convert the payload to ASCII.  
          2. Sign with your RSA private key (PKCS#1 v1.5 + SHA-256).  
          3. Base64-encode the binary signature (RFC 2045).  
        - **Example**:  
          ```bash
          echo -n "/public/api/ver1/users/change_mode?mode=paper" \
            | openssl dgst -sha256 -sign private.pem \
            | openssl enc -base64 -A
          ```

        **2) HMAC-SHA256**  
        - **Payload**: `<path>?<sorted_query_params><request_body>`  
        - **Steps**:  
          1. Concatenate the query string and the request body (`totalParams`).  
          2. Compute an HMAC-SHA256 over `totalParams` using your SecretKey.  
          3. Hex-encode the result (lowercase).  
        - **Example**:  
          ```bash
          echo -n "/public/api/ver1/users/change_mode?mode=paper" \
            | openssl dgst -sha256 -hmac "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j"
  schemas:
    BotEntity:
      type: object
      required:
        - account_id
        - pairs
      properties:
        name:
          type: string
          description: User-defined name of the DCA Bot. If not specified, the system will generate a default name automatically.
          minLength: 1
          maxLength: 200
        account_id:
          type: integer
          description: ID of the exchange account entity where you want to create the DCA Bot.
        pairs:
          $ref: '#/components/schemas/Pairs'
          description: |
            Trading pair(s) in 3Commas format. If a single pair is passed, a SingleBot is created.  
            If two or more pairs are passed, a MultiBot is created.
        max_active_deals:
          type: integer
          description: The maximum number of active deals available for this DCA Bot.
          minimum: 1
          maximum: 199
          default: 1
        strategy:
          type: string
          description: The type of trading strategy used by this DCA Bot.
          enum:
            - short
            - long
        profit_currency:
          type: string
          description: |
            Currency used for profit calculation: base_currency or quote_currency.
          enum:
            - base_currency
            - quote_currency
        base_order_volume_type:
          type: string
          description: The volume type of the base order.
          enum:
            - quote_currency
            - base_currency
            - percent
        base_order_volume:
          type: string
          description: The volume of the base order for this DCA Bot.
        start_order_type:
          type: string
          description: The start order type for this DCA Bot.
          enum:
            - limit
            - market
        strategy_list:
          type: array
          items:
            $ref: '#/components/schemas/StrategyConfig'
          description: Array of strategies specifically for opening deals.
        leverage_type:
          type: string
          description: Sets leverage settings for a futures account.
          enum:
            - cross
            - isolated
        leverage_custom_value:
          type: number
          description: Leverage value (exchange- and pair-dependent).
        trailing_enabled:
          type: boolean
          description: Enables trailing for Take Profit.
        trailing_deviation:
          type: string
          description: Percentage value of the trailing deviation.
        take_profit_type:
          type: string
          description: Basis for Take Profit calculation.
          enum:
            - base
            - total
        take_profit:
          type: string
          description: Percentage value for the bot’s Take Profit. Set to 0 if using steps.
        take_profit_steps:
          type: array
          items:
            $ref: '#/components/schemas/TakeProfitStep'
          description: |
            Take Profit steps (up to 4), each with:
            - amount_percentage  
            - profit_percentage
        close_strategy_list:
          type: array
          items:
            $ref: '#/components/schemas/StrategyConfig'
          description: Array of strategies used for closing deals.
        min_profit_type:
          type: string
          description: Basis for minimum profit calculation.
          enum:
            - base_order_volume
            - total_bought_volume
        min_profit_percentage:
          type: string
          description: Minimum profit percentage required to complete a deal.
        reinvesting_percentage:
          type: string
          description: Percentage of realized profit to reinvest in each new deal.
          minimum: 0
          maximum: 100
        stop_loss_percentage:
          type: string
          description: Percentage drop to trigger Stop Loss.
        stop_loss_type:
          type: string
          description: Action after Stop Loss closes a deal.
          enum:
            - stop_loss
            - stop_loss_and_disable_bot
        tsl_enabled:
          type: boolean
          description: Enables trailing for Stop Loss.
        sl_to_breakeven_enabled:
          type: boolean
          description: Enables the Move-to-Breakeven feature.
          default: false
        sl_to_breakeven_data:
          type: object
          description: |
            Configuration for breakeven trigger levels (0 = entry price, 1 = first TP step, etc.).
        stop_loss_timeout_enabled:
          type: boolean
          description: Enables Stop Loss timeout.
          default: false
        stop_loss_timeout_in_seconds:
          type: integer
          description: Timeout duration in seconds for Stop Loss.
        risk_reduction_percentage:
          type: string
          description: Percentage of losses to reduce base and safety orders proportionally.
        safety_order_step_percentage:
          type: string
          description: Price deviation (%) to open each safety order.
        safety_order_volume_type:
          type: string
          description: Volume type for safety orders.
          enum:
            - quote_currency
            - base_currency
            - percent
        safety_order_volume:
          type: string
          description: Volume of each safety order.
        safety_strategy_list:
          type: array
          items:
            $ref: '#/components/schemas/StrategyConfig'
          description: Array of strategies for executing safety orders.
        max_safety_orders:
          type: integer
          description: Maximum total number of safety orders per deal.
          minimum: 0
          maximum: 200
        active_safety_orders_count:
          type: integer
          description: Number of safety orders the bot may place concurrently.
        martingale_volume_coefficient:
          type: string
          description: Multiplier for increasing safety order volume (Martingale).
          minimum: 0.1
          maximum: 10
        martingale_step_coefficient:
          type: string
          description: Multiplier for increasing safety order step (Martingale).
          minimum: 0.1
          maximum: 10
        min_volume_btc_24h:
          type: string
          description: Minimum 24h BTC volume required to open a deal.
        min_price:
          type: number
          description: Minimum price to open a new deal.
        max_price:
          type: number
          description: Maximum price to open a new deal.
        deal_start_delay_seconds:
          type: integer
          description: Delay before a new deal starts (seconds).
        cooldown:
          type: string
          description: Time after closing a deal before a new one can start (seconds).
          minimum: 0
          maximum: 2592000
        disable_after_deals_count:
          type: integer
          description: Number of deals after which the bot disables itself.
        allowed_deals_on_same_pair:
          type: integer
          description: Max concurrent deals on the same pair (MultiBot only).
        min_price_percentage:
          type: number
          description: Minimum entry price percentage (−95 to 1000).
          minimum: -95
          maximum: 1000
        max_price_percentage:
          type: number
          description: Maximum entry price percentage (−95 to 1000).
          minimum: -95
          maximum: 1000
        close_deals_timeout:
          type: string
          description: Auto-close deals after this many seconds.
          minimum: 60

    Bot:
      allOf:
        - $ref: '#/components/schemas/BotEntity'
        - type: object
          required: [id, account_id]
          properties:
            id:
              type: integer
              description: Unique 3Commas ID for this DCA Bot.
            is_enabled:
              type: boolean
              description: Whether the bot is currently enabled.
            active_deals:
              type: array
              description: List of active deals managed by this DCA Bot.
              items:
                $ref: '#/components/schemas/Deal'
            active_deals_count:
              type: integer
              description: Number of active deals.
            deletable?:
              type: boolean
              description: Indicates whether this bot can be deleted.
            created_at:
              type: string
              format: date-time
              description: ISO-8601 timestamp when the bot was created.
            updated_at:
              type: string
              format: date-time
              description: ISO-8601 timestamp of last update.
            account_name:
              type: string
              description: Exchange-account name shown to the user.
            finished_deals_profit_usd:
              type: string
              description: Cumulative USD profit from finished deals.
            finished_deals_count:
              type: string
              description: Total number of finished deals.
            funds_locked_in_active_deals:
              type: string
              description: USD currently locked in active deals.
            btc_funds_locked_in_active_deals:
              type: string
              description: BTC currently locked in active deals.
            active_deals_usd_profit:
              type: string
              description: Unrealised P/L of active deals (USD).
            active_deals_btc_profit:
              type: string
              description: Unrealised P/L of active deals (BTC).
            reinvested_volume_usd:
              type: number
              nullable: true
              description: USD volume reinvested from profit.

    CreateBotRequest:
      $ref: '#/components/schemas/BotEntity'
      required: 
        - base_order_volume_type
        - base_order_volume
        - strategy_list
        - take_profit_type
        - take_profit
        - risk_reduction_percentage
        - safety_order_step_percentage
        - safety_order_volume
        - max_safety_orders
        - active_safety_orders_count
        - martingale_volume_coefficient
        - martingale_step_coefficient

    UpdateBotRequest:
      $ref: '#/components/schemas/BotEntity'
      required:
        - base_order_volume_type
        - base_order_volume
        - safety_order_volume
        - martingale_volume_coefficient
        - martingale_step_coefficient
        - max_safety_orders
        - active_safety_orders_count
        - safety_order_step_percentage
        - take_profit_type
        - strategy_list
        - trailing_deviation
        - stop_loss_timeout_in_seconds

    StrategyConfig:
      type: object
      description: Configuration object for an individual strategy in strategy_list, close_strategy_list, or safety_strategy_list.
      properties:
        strategy:
          type: string
          description: |
            Identifier of the strategy, e.g.  
            - "manual"  
            - "nonstop"  
            - "trading_view"  
            - "rsi"
        options:
          type: object
          description: Strategy-specific parameters (keys depend on the chosen strategy; see examples below).
          additionalProperties: true
      example:
        - strategy: "manual"
          options: {}
        - strategy: "nonstop"
          options: {}
        - strategy: "trading_view"
          options:
            time: "5m"
            type: "buy_or_strong_buy"
        - strategy: "rsi"
          options:
            time: "5m"
            points: 30
            trigger_condition: "less"
            time_period: 7

    TakeProfitStep:
      type: object
      properties:
        id:
          type: integer
          description: "Step number of Take Profit."
        amount_percentage:
          type: integer
          description: "The percentage of the base order volume to be allocated for this Take Profit step."
        profit_percentage:
          type: integer
          description: "The specific profit percentage applied to the volume of units for this Take Profit step."

    Deal:
      type: object
      description: A single DCA‐bot deal, with all its execution and P/L details.
      properties:
        id:
          type: integer
          description: Unique 3Commas ID for this Deal entity.
        type:
          type: string
          description: The type of entity.
        bot_id:
          type: integer
          description: Unique 3Commas ID for the DCA Bot that opened this deal.
        bot_name:
          type: string
          description: DCA Bot name specified by the user.
        deal_has_error:
          type: boolean
          description: Indicates whether this Deal has encountered any errors.
        account_id:
          type: integer
          description: Unique 3Commas ID for the exchange account used.
        account_name:
          type: string
          description: The name of the exchange account, as set by the user.
        created_at:
          type: string
          format: date-time
          description: When the Deal was created (ISO 8601).
        updated_at:
          type: string
          format: date-time
          description: When the Deal was last updated (ISO 8601).
        closed_at:
          type: string
          format: date-time
          nullable: true
          description: When the Deal was closed, or `null` if still open.
        finished?:
          type: boolean
          description: Whether this Deal has finished (`true`) or is still in progress (`false`).
        max_safety_orders:
          type: integer
          description: Maximum number of safety orders allowed for this deal.
        active_safety_orders_count:
          type: integer
          description: Number of safety orders the bot may place concurrently.
        current_active_safety_orders_count:
          type: integer
          description: Currently active safety orders (including manual).
        current_active_safety_orders:
          type: integer
          description: Currently active safety orders.
        completed_safety_orders_count:
          type: integer
          description: How many safety orders have already been filled.
        active_manual_safety_orders:
          type: integer
          description: Number of active manually‐triggered safety orders.
        completed_manual_safety_orders_count:
          type: integer
          description: Number of manually‐triggered safety orders that have completed.
        safety_order_volume:
          type: string
          description: Size of each safety order.
        safety_order_step_percentage:
          type: string
          description: Price deviation (%) between safety orders.
        safety_order_volume_type:
          type: string
          description: Volume type for safety orders (e.g. `quote_currency`, `base_currency`, `percent`).
        safety_strategy_list:
          type: array
          description: Custom strategies for safety orders.
          items:
            type: object
            additionalProperties: true
        cancellable?:
          type: boolean
          description: Whether this deal can still be canceled.
        panic_sellable?:
          type: boolean
          description: Whether this deal can still be closed at market price.
        trailing_enabled:
          type: boolean
          description: Trailing Take Profit enabled.
        tsl_enabled:
          type: boolean
          description: Trailing Stop Loss enabled.
        stop_loss_timeout_enabled:
          type: boolean
          description: Whether Stop-Loss timeout is enabled.
        stop_loss_timeout_in_seconds:
          type: integer
          description: Duration (s) of Stop-Loss timeout.
        pair:
          type: string
          description: Trading pair in 3Commas format.
        status:
          type: string
          description: Deal status (e.g. `bought`, `completed`, `failed`).
        localized_status:
          type: string
          description: Human‐readable status.
        take_profit_type:
          type: string
          description: Basis for TP calculation (`base` or `total`).
        take_profit:
          type: string
          nullable: true
          description: Take Profit percentage, or `null` if using steps.
        take_profit_steps:
          type: array
          description: If using TP steps, the details of each step.
          items:
            type: object
            properties:
              id:
                type: integer
                description: Step index.
              amount_percentage:
                type: number
                description: '% of base order volume for this TP step.'
              profit_percentage:
                type: number
                description: '% profit target for this TP step.'
              editable:
                type: boolean
                description: Whether this step can still be edited.
              panic_sellable:
                type: boolean
                description: Whether this TP step can be closed at market.
              trade_id:
                type: integer
                description: 3Commas Trade entity ID.
              execution_timestamp:
                type: string
                format: date-time
                nullable: true
                description: When this TP step executed, or `null`.
              initial_amount:
                type: string
                description: Volume allocated for this TP step.
              price:
                type: string
                description: Trigger price for this TP step.
              status:
                type: string
                description: Current status of this TP step.
        base_order_volume:
          type: string
          description: Volume of the base order.
        base_order_volume_type:
          type: string
          description: Volume type of the base order.
        leverage_type:
          type: string
          description: Leverage mode (`cross`, `isolated`, or `not_specified`).
        leverage_custom_value:
          type: string
          nullable: true
          description: User‐set leverage value.
        bought_amount:
          type: string
          description: Amount of asset bought.
        bought_volume:
          type: string
          description: Quote‐currency volume spent.
        bought_average_price:
          type: string
          description: Average price of the buy.
        base_order_average_price:
          type: string
          description: Average price of the base order.
        sold_amount:
          type: string
          description: Amount of asset sold.
        sold_volume:
          type: string
          description: Quote‐currency volume received from sells.
        sold_average_price:
          type: string
          description: Average sell price.
        final_profit:
          type: string
          description: Net P/L (in profit currency).
        final_profit_percentage:
          type: string
          description: Net P/L percentage.
        usd_final_profit:
          type: string
          description: Net P/L expressed in USD.
        actual_profit:
          type: string
          nullable: true
          description: Realized P/L after execution.
        actual_usd_profit:
          type: string
          nullable: true
          description: Realized P/L in USD.
        martingale_volume_coefficient:
          type: string
          description: Martingale volume multiplier.
        martingale_step_coefficient:
          type: string
          description: Martingale step multiplier.
        stop_loss_percentage:
          type: string
          description: Stop-Loss trigger percentage.
        sl_to_breakeven_enabled:
          type: boolean
          description: Move-to-Breakeven feature enabled.
        sl_to_breakeven_data:
          type: object
          nullable: true
          description: 'Breakeven config (e.g. `{ "upper_breakeven_limit": 1 }`).'
          additionalProperties: true
        error_message:
          type: string
          nullable: true
          description: Error message if the deal failed.
        profit_currency:
          type: string
          description: Currency for profit calculation.
        stop_loss_type:
          type: string
          description: What action occurs on Stop-Loss.
        from_currency:
          type: string
          description: Quote currency code.
        to_currency:
          type: string
          description: Base currency code.
        min_profit_percentage:
          type: string
          description: Minimum profit % for TP close strategy.
        min_profit_type:
          type: string
          nullable: true
          description: Basis for minimum profit calculation.
        close_strategy_list:
          type: array
          description: Custom close strategies applied.
          items:
            type: object
            additionalProperties: true
        note:
          type: string
          nullable: true
          description: Optional user note.
        add_fundable:
          type: boolean
          description: Whether adding funds is allowed.
        smart_trade_convertable:
          type: boolean
          description: Whether this deal can be converted to a SmartTrade.
        market_type:
          type: string
          description: Exchange market type (`spot` or `futures`).
        current_price:
          type: string
          description: Latest market price.
        take_profit_price:
          type: string
          description: TP trigger price (single‐condition bots).
        stop_loss_price:
          type: string
          description: SL trigger price.
        actual_profit_percentage:
          type: string
          description: Realized profit percentage.
        orderbook_price_currency:
          type: string
          description: Currency used for orderbook quotes.
        bot_events:
          type: array
          description: Log of bot events for this deal.
          items:
            type: object
            properties:
              message:
                type: string
                description: Event description.
              created_at:
                type: string
                format: date-time
                description: When the event occurred.
        # these are not in the spec on the docs
        from_currency_id:
          type: integer
        to_currency_id:
          type: integer

    DealUpdateRequest:
      type: object
      description: Parameters for editing an existing DCA Bot deal.
      properties:
        take_profit:
          type: number
          description: Percentage value for the bot’s Take Profit. Must be 0 if using multiple take_profit_steps.
        take_profit_steps:
          type: array
          description: Multiple steps with conditions for Taking Profit in this deal.
          items:
            $ref: '#/components/schemas/TakeProfitStep'
        profit_currency:
          type: string
          description: Currency used to calculate profit (`quote_currency` or `base_currency`).
          enum:
            - quote_currency
            - base_currency
        take_profit_type:
          type: string
          description: Take Profit order type for this deal.
          enum:
            - base
            - total
        trailing_enabled:
          type: boolean
          description: Enable trailing for Take Profit.
        sl_to_breakeven_enabled:
          type: boolean
          description: Enable Move to Breakeven (requires at least two TP steps).
        sl_to_breakeven_data:
          type: object
          description: Upper limit to which stop loss will move when breakeven is activated.
          properties:
            upper_breakeven_limit:
              type: number
        max_safety_orders:
          type: integer
          description: Maximum total number of Safety Orders for this deal.
          minimum: 0
          maximum: 200
        active_safety_orders_count:
          type: integer
          description: Number of Safety Orders placed in advance on the exchange order book.
        stop_loss_percentage:
          type: number
          description: Percentage drop from TP target to trigger a Stop Loss market order.
        stop_loss_timeout_enabled:
          type: boolean
          description: Enable timeout before Stop Loss executes.
        stop_loss_timeout_in_seconds:
          type: integer
          description: Timeout value in seconds; required if stop_loss_timeout_enabled is true.
        tsl_enabled:
          type: boolean
          description: Enable trailing for Stop Loss.
        stop_loss_type:
          type: string
          description: Action after Stop Loss triggers.
          enum:
            - stop_loss
            - stop_loss_and_disable_bot
        close_timeout:
          type: integer
          description: Seconds after which the deal will auto-close.
          minimum: 60
        note:
          type: string
          description: Optional user-defined note for this deal.
        min_profit_percentage:
          type: number
          description: Minimum profit percentage required to complete the deal.
      required:
        - take_profit_type

    StrategyList:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StrategyDefinition'
    StrategyDefinition:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name of the strategy.
        strategy_type:
          type: string
          description: Type of strategy (e.g., signal, indicator).
        payed:
          type: boolean
          description: Indicates if the strategy requires payment.
        beta:
          type: boolean
          description: Indicates if the strategy is in beta.
        options:
          type: object
          nullable: true
          description: Strategy-specific parameters.
          additionalProperties: true
        accounts_whitelist:
          type: array
          items:
            type: string
          nullable: true
          description: List of account types supported by this strategy.
      required:
        - name
        - strategy_type
        - payed
        - beta
    BotsStats:
      type: object
      properties:
        overall_stats:
          type: object
          description: Cumulative profit or loss by currency for all trading activity.
          additionalProperties:
            type: string
        today_stats:
          type: object
          description: Today's profit or loss by currency.
          additionalProperties:
            type: string
        profits_in_usd:
          type: object
          description: Detailed profit and loss data in USD.
          properties:
            overall_usd_profit:
              type: number
              description: Cumulative USD profit or loss from all trading activity.
            today_usd_profit:
              type: number
              description: USD profit or loss accumulated for the current day.
            active_deals_usd_profit:
              type: number
              description: USD profit or loss from active (unclosed) deals.
            funds_locked_in_active_deals:
              type: number
              description: Funds locked in active deals, in USD.
          required:
            - overall_usd_profit
            - today_usd_profit
            - active_deals_usd_profit
            - funds_locked_in_active_deals
      example:
        overall_stats:
          USDT: "-47.47740906"
        today_stats:
          USDT: "10.98885705"
        profits_in_usd:
          overall_usd_profit: -47.48
          today_usd_profit: 10.99
          active_deals_usd_profit: 1.366505088
          funds_locked_in_active_deals: 300.843218676
    BotsStatsByDate:
      type: object
      properties:
        stats:
          type: object
          description: Profit by currency for the specified date.
          additionalProperties:
            type: string
        usd_profit:
          type: string
          description: USD profit from deals for the specified day.
        btc_profit:
          type: string
          description: BTC profit from deals for the specified day.
      required:
        - stats
        - usd_profit
        - btc_profit
      example:
        stats:
          USDT: "7.92064973"
        usd_profit: "7.92064973"
        btc_profit: "0.000103814744285414700639614134423823"
    ProfitByDay:
      type: array
      items:
        type: object
        properties:
          s_date:
            type: string
            format: date
          unix_timestamp:
            type: integer
          profit:
            type: object
            properties:
              btc:
                type: string
              usd:
                type: string
        required:
          - s_date
          - unix_timestamp
          - profit

    DealsStats:
      type: object
      properties:
        active:
          type: integer
          description: The number of currently active deals.
        completed:
          type: integer
          description: The total number of completed deals.
        panic_sold:
          type: integer
          description: The number of deals closed at market price.
        from_currency_is_dollars:
          type: boolean
          description: Shows whether the base currency for profit calculation is USD.
        completed_deals_usd_profit:
          type: string
          description: The total profit from completed deals in USD.
        completed_deals_btc_profit:
          type: string
          description: The total profit from completed deals in BTC.
        funds_locked_in_active_deals:
          type: string
          description: The total funds currently locked in active deals, in USD.
        btc_funds_locked_in_active_deals:
          type: string
          description: The total funds currently locked in active deals, in BTC.
        active_deals_usd_profit:
          type: string
          description: The current profit or loss from active deals in USD.
        active_deals_btc_profit:
          type: string
          description: The current profit or loss from active deals in BTC.

    ErrorResponse:
      type: object
      required: 
        - error
      properties:
        error:
          type: string
          description: Short error code
        error_description:
          type: string
          description: Human-readable error message
        error_attributes:
          type: object
          description: Validation errors keyed by field name
          additionalProperties:
            type: array
            items:
              type: string
    
    CopyBotRequest:
      type: object
      required:
        - name
        - secret
        - amount
      properties:
        name:
          type: string
          description: The name for the new DCA Bot specified by the user.
        secret:
          type: string
          description: A unique code used for copying this bot, retrieved from the url_secret parameter.
        amount:
          type: number
          description: Amount allocated for bot usage.
    CopyBotResponse:
      type: object
      properties:
        bot_id:
          type: number
          description: Unique 3Commas ID for the newly created DCA Bot.
        bot_required_amount:
          type: number
          description: The minimum amount of funds required to launch this bot.

    MarketListItem:
      type: object
      properties:
        market_name:
          type: string
          description: Name of the exchange in the 3Commas system.
        market_url:
          type: string
          description: Referral link to the exchange website.
        market_icon:
          type: string
          description: URL link to the icon for this exchange.
        help_link:
          type: string
          description: Public URL to the help page with detailed instructions on connecting the exchange.
        market_code:
          type: string
          description: 3Commas exchange code entity.
        form_fields:
          $ref: '#/components/schemas/FormFields'
        available_connection_flows:
          type: array
          items:
            type: string
            enum:
              - form
              - fast_connect
          description: Available exchange connection types in 3Commas.
        third_party_allowed:
          type: boolean
          description: Indicates whether this exchange allows connection by third-party apps.
        trusted_ips:
          type: array
          items:
            type: string
          description: List of IP addresses that need to be whitelisted on the exchange's website for 3Commas to work with the exchange.
        trusted_ips_input_type:
          type: string
          description: Input type for trusted IP addresses.
        fast_connect_action_name:
          type: string
          description: Name of the exchange for fast connection option in the 3Commas system.
      required:
        - market_name
        - market_url
        - market_icon
        - help_link
        - market_code
        - form_fields
        - available_connection_flows
        - third_party_allowed
        - trusted_ips
        - trusted_ips_input_type
        - fast_connect_action_name

    FormFields:
      type: object
      properties:
        required:
          type: array
          items:
            $ref: '#/components/schemas/FormField'
        optional:
          type: array
          items:
            $ref: '#/components/schemas/FormField'
      required:
        - required
        - optional

    FormField:
      type: object
      properties:
        field:
          type: string
          description: The parameter needed to connect a new exchange account.
        localized_name:
          type: string
          description: Display name of the field, localized for user convenience.
      required:
        - field
        - localized_name

    CurrencyRates:
      type: object
      properties:
        last:
          type: string
          description: Last price.
        bid:
          type: string
          description: Bid price.
        ask:
          type: string
          description: Ask price.
        orderbook_ask:
          type: string
          description: Ask price of ticker.
        orderbook_bid:
          type: string
          description: Bid price of ticker.
        orderbook_last:
          type: string
          description: Last price of ticker.
        orderbook_price_currency:
          type: string
          description: Currency price of ticker.
        strategy_name:
          type: string
          description: The name of trading strategy.
        contract_strategy_name:
          type: string
          description: The strategy by which the contract price is calculated.
        instrumentKind:
          type: string
          description: The type of exchange instrument.
        minPrice:
          type: string
          description: Minimum price order.
        maxPrice:
          type: string
          description: Maximum price order.
        priceStep:
          type: string
          description: The minimum step for changing the price.
        minLotSize:
          type: string
          description: The minimum lot size for order in Base currency.
        lotStep:
          type: string
          description: Order of changing the size in Base currency.
        maxMarketBuyAmount:
          type: string
          description: Maximum order size in Base currency for buy.
        maxMarketSellAmount:
          type: string
          description: Maximum order size in Base currency for sell.
        bidMultiplierDown:
          type: string
          description: A multiplier applied to decrease the bid price.
        bidMultiplierUp:
          type: string
          description: A multiplier applied to increase the bid price.
        askMultiplierUp:
          type: string
          description: A multiplier applied to increase the ask price.
        askMultiplierDown:
          type: string
          description: A multiplier applied to decrease the ask price.
        minTotal:
          type: string
          description: Minimum order size in Quote.
        minMarketTotal:
          type: string
          description: Minimum order size in Quote for market order.
        maxTotal:
          type: string
          description: Maximum order size in Quote.
        maxLotSize:
          type: string
          description: Maximum order size in Base.
      required:
        - last
        - bid
        - ask
        - orderbook_ask
        - orderbook_bid
        - orderbook_last
        - orderbook_price_currency
        - strategy_name
        - contract_strategy_name
        - instrumentKind
        - minPrice
        - maxPrice
        - priceStep
        - minLotSize
        - lotStep
        - maxMarketBuyAmount
        - maxMarketSellAmount
        - bidMultiplierDown
        - bidMultiplierUp
        - askMultiplierUp
        - askMultiplierDown
        - minTotal
        - minMarketTotal
        - maxTotal
        - maxLotSize
      example:
        last: "63802.44"
        bid: "63802.44"
        ask: "63802.45"
        orderbook_ask: "63802.45"
        orderbook_bid: "63802.44"
        orderbook_last: "63802.44"
        orderbook_price_currency: "USDT"
        strategy_name: "orderbook_price"
        contract_strategy_name: "orderbook_price"
        instrumentKind: "spot"
        minPrice: "0.01"
        maxPrice: "1000000.0"
        priceStep: "0.01"
        minLotSize: "0.00001"
        lotStep: "0.00001"
        maxMarketBuyAmount: "121.22278732"
        maxMarketSellAmount: "121.22278732"
        bidMultiplierDown: "0.2"
        bidMultiplierUp: "5.0"
        askMultiplierUp: "5.0"
        askMultiplierDown: "0.2"
        minTotal: "5.0"
        minMarketTotal: "5.0"
        maxTotal: "9000000.0"
        maxLotSize: "9000.0"

    LeverageData:
      type: object
      properties:
        code:
          type: string
          description: The type of leverage available.
        name:
          type: string
          description: Name of the leverage option available for this contract.
        can_set_leverage_value:
          type: boolean
          description: Indicates whether a custom leverage value can be set.
        available_leverage_values:
          type: array
          items:
            type: string
          description: Available leverage values for settings for this pair and exchange.
        max_leverage:
          type: string
          description: The maximum leverage value allowed for this contract.
        valid:
          type: object
          description: Contains minimum and maximum leverage value that can be applied for this pair.
          properties:
            min:
              type: number
              description: The minimum leverage value that can be applied to this contract.
            max:
              type: string
              description: The maximum leverage value that can be applied to this contract.
          required:
            - min
            - max

    CurrencyRatesWithLeverageData:
      allOf:
        - $ref: '#/components/schemas/CurrencyRates'
        - type: object
          properties:
            leverage_data:
              description: Represents leverage data for this pair.
              items:
                $ref: '#/components/schemas/LeverageData'
              type: array
            minMarketBuyAmount:
              description: Minimum order size in Base currency for buy.
              type: string
            minMarketSellAmount:
              description: Minimum order size in Base currency for sell.
              type: string
          required:
            - last
            - bid
            - ask
            - orderbook_ask
            - orderbook_bid
            - orderbook_last
            - orderbook_price_currency
            - strategy_name
            - contract_strategy_name
            - leverage_data
            - instrumentKind
            - minPrice
            - maxPrice
            - priceStep
            - minLotSize
            - lotStep
            - maxMarketBuyAmount
            - maxMarketSellAmount
            - bidMultiplierDown
            - bidMultiplierUp
            - askMultiplierUp
            - askMultiplierDown
            - minTotal
            - minMarketTotal
            - maxTotal
            - maxLotSize

    ValidateResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Indicates whether the provided API credentials are valid.
      required:
        - valid
      example:
        valid: true

    PairsResponse:
      type: object
      description: Response wrapper for a list of trading pairs
      properties:
        pairs:
          $ref: '#/components/schemas/Pairs'
      required:
        - pairs

    Pairs:
      type: array
      items:
        type: string
      description: Trading pair(s) in 3Commas format.
      example:
        - "BNFCR_1INCHUSDT"

    MarketOrder:
      type: object
      properties:
        order_id:
          type: string
          description: Unique 3Commas Trade entity ID.
        order_type:
          type: string
          description: The side of the order to be created by this trade.
        deal_order_type:
          type: string
          description: The type of the order to be created by this trade.
        cancellable:
          type: boolean
          description: Indicates whether this trade can be canceled.
        status_string:
          type: string
          description: 3Commas status for this Trade.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        quantity:
          type: string
        quantity_remaining:
          type: string
        total:
          type: string
        rate:
          type: string
        average_price:
          type: string
      required:
        - order_id
        - order_type
        - deal_order_type
        - cancellable
        - status_string
        - created_at
        - updated_at
        - quantity
        - quantity_remaining
        - total
        - rate
        - average_price